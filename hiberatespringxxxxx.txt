<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.pack</groupId>
	<artifactId>SpringHibernateIntegration</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>SpringHibernateIntegration</name>
	
	<properties>

              <java-version>1.7</java-version>

              <org.springframework-version>4.0.3.RELEASE</org.springframework-version>

              <org.aspectj-version>1.7.4</org.aspectj-version>

              <org.slf4j-version>1.7.5</org.slf4j-version>

              <hibernate.version>4.3.5.Final</hibernate.version>

       </properties>

       <dependencies>

              <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->

              <dependency>

                     <groupId>mysql</groupId>

                     <artifactId>mysql-connector-java</artifactId>

                     <version>8.0.11</version>

              </dependency>

              <dependency>

                     <groupId>javax.validation</groupId>

                     <artifactId>validation-api</artifactId>

                     <version>1.1.0.Final</version>

              </dependency>

              <dependency>

                     <groupId>org.hibernate</groupId>

                     <artifactId>hibernate-validator</artifactId>

                     <version>5.1.0.Final</version>

              </dependency>

              <!-- Spring -->

              <dependency>

                     <groupId>org.springframework</groupId>

                     <artifactId>spring-context</artifactId>

                     <version>${org.springframework-version}</version>

                     <exclusions>

                           <!-- Exclude Commons Logging in favor of SLF4j -->

                           <exclusion>

                                  <groupId>commons-logging</groupId>

                                  <artifactId>commons-logging</artifactId>

                           </exclusion>

                     </exclusions>

              </dependency>

              <dependency>

                     <groupId>org.springframework</groupId>

                     <artifactId>spring-webmvc</artifactId>

                     <version>${org.springframework-version}</version>

              </dependency>

              <dependency>

                     <groupId>org.springframework</groupId>

                     <artifactId>spring-tx</artifactId>

                     <version>${org.springframework-version}</version>

              </dependency>

 

              <!-- Hibernate -->

              <dependency>

                     <groupId>org.hibernate</groupId>

                     <artifactId>hibernate-core</artifactId>

                     <version>${hibernate.version}</version>

              </dependency>

              <dependency>

                     <groupId>org.hibernate</groupId>

                     <artifactId>hibernate-entitymanager</artifactId>

                     <version>${hibernate.version}</version>

              </dependency>

 

              <!-- Apache Commons DBCP -->

              <dependency>

                     <groupId>commons-dbcp</groupId>

                     <artifactId>commons-dbcp</artifactId>

                     <version>1.4</version>

              </dependency>

              <!-- Spring ORM -->

              <dependency>

                     <groupId>org.springframework</groupId>

                     <artifactId>spring-orm</artifactId>

                     <version>${org.springframework-version}</version>

              </dependency>

 

              <!-- AspectJ -->

              <dependency>

                     <groupId>org.aspectj</groupId>

                     <artifactId>aspectjrt</artifactId>

                     <version>${org.aspectj-version}</version>

              </dependency>

 

              <!-- Logging -->

              <dependency>

                     <groupId>org.slf4j</groupId>

                     <artifactId>slf4j-api</artifactId>

                     <version>${org.slf4j-version}</version>

              </dependency>

              <dependency>

                     <groupId>org.slf4j</groupId>

                     <artifactId>jcl-over-slf4j</artifactId>

                     <version>${org.slf4j-version}</version>

                     <scope>runtime</scope>

              </dependency>

              <dependency>

                     <groupId>org.slf4j</groupId>

                     <artifactId>slf4j-log4j12</artifactId>

                     <version>${org.slf4j-version}</version>

                     <scope>runtime</scope>

              </dependency>

              <!-- https://mvnrepository.com/artifact/log4j/log4j -->

              <dependency>

                     <groupId>log4j</groupId>

                     <artifactId>log4j</artifactId>

                     <version>1.2.17</version>

              </dependency>

 

 

 

 

 

              <!-- @Inject -->

              <dependency>

                     <groupId>javax.inject</groupId>

                     <artifactId>javax.inject</artifactId>

                     <version>1</version>

              </dependency>

              <dependency>

                     <groupId>javax.servlet</groupId>

                     <artifactId>servlet-api</artifactId>

                     <version>2.5</version>

                     <scope>provided</scope>

              </dependency>

              <dependency>

                     <groupId>javax.servlet.jsp</groupId>

                     <artifactId>jsp-api</artifactId>

                     <version>2.1</version>

                     <scope>provided</scope>

              </dependency>

              <dependency>

                     <groupId>javax.servlet</groupId>

                     <artifactId>jstl</artifactId>

                     <version>1.2</version>

              </dependency>

              <!-- Testing -->

              <dependency>

                     <groupId>junit</groupId>

                     <artifactId>junit</artifactId>

                     <version>4.12</version>

                     <scope>test</scope>

                     <exclusions>

                           <exclusion>

                                  <groupId>org.hamcrest</groupId>

                                  <artifactId>hamcrest-core</artifactId>

                           </exclusion>

                     </exclusions>

              </dependency>

              <dependency>

                     <groupId>org.springframework</groupId>

                     <artifactId>spring-test</artifactId>

                     <version>4.3.1.RELEASE</version>

                     <scope>test</scope>

              </dependency>

              <dependency>

                     <groupId>org.hamcrest</groupId>

                     <artifactId>hamcrest-all</artifactId>

                     <version>1.3</version>

                     <scope>test</scope>

              </dependency>

              <dependency>

                     <groupId>org.mockito</groupId>

                     <artifactId>mockito-core</artifactId>

                     <version>1.10.19</version>

                     <exclusions>

                           <exclusion>

                                  <groupId>org.hamcrest</groupId>

                                  <artifactId>hamcrest-core</artifactId>

                           </exclusion>

                     </exclusions>

                     <scope>test</scope>

              </dependency>

              <dependency>

                     <groupId>com.jayway.jsonpath</groupId>

                     <artifactId>json-path-assert</artifactId>

                     <version>2.2.0</version>

                     <scope>test</scope>

                     <exclusions>

                           <exclusion>

                                  <groupId>org.hamcrest</groupId>

                                  <artifactId>hamcrest-core</artifactId>

                           </exclusion>

                           <exclusion>

                                  <groupId>org.slf4j</groupId>

                                  <artifactId>slf4j-api</artifactId>

                           </exclusion>

                     </exclusions>

              </dependency>

 

 

 

       </dependencies>

 

       <build>

              <testSourceDirectory>src/main/test</testSourceDirectory>

              <resources>

                     <resource>

                           <directory>src/main/resources</directory>

                           <excludes>

                                  <exclude>**/*.java</exclude>

                           </excludes>

                     </resource>

                     <resource>

                           <directory>src/test/java</directory>

                           <excludes>

                                  <exclude>**/*.java</exclude>

                           </excludes>

                     </resource>

                     <resource>

                           <directory>src/test/resources</directory>

                           <excludes>

                                  <exclude>**/*.java</exclude>

                           </excludes>

                     </resource>

                     <resource>

                           <directory>src/main/webapp</directory>

                           <excludes>

                                  <exclude>**/*.java</exclude>

                           </excludes>

                     </resource>

              </resources>

              <plugins>

                     <plugin>

                           <artifactId>maven-war-plugin</artifactId>

                           <version>2.3</version>

                           <configuration>

                                  <failOnMissingWebXml>false</failOnMissingWebXml>

                           </configuration>

                     </plugin>

                     <plugin>

                           <artifactId>maven-compiler-plugin</artifactId>

                           <version>3.1</version>

                           <configuration>

                                  <source>1.7</source>

                                  <target>1.7</target>

                           </configuration>

                     </plugin>

              </plugins>

       </build>
	

</project>




wed.xml


<?xml version="1.0" encoding="UTF-8"?>

<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://java.sun.com/xml/ns/javaee"
       xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
       xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
       id="WebApp_ID" version="2.5">

       <display-name>SpringExample11</display-name>
       
       <servlet>
              <servlet-name>appServlet</servlet-name>
              <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
                           
              <init-param>
              <param-name>contextConfigLocation</param-name>
              <param-value>/WEB-INF/spring/dispatcher-servlet.xml</param-value>      
              </init-param>
              
              <load-on-startup>1</load-on-startup>
       </servlet>
       

       <servlet-mapping>
              <servlet-name>appServlet</servlet-name>
              <url-pattern>/</url-pattern>
       </servlet-mapping>

 

</web-app>




dispatcher ser
 <?xml version="1.0" encoding="UTF-8"?>

<beans:beans

       xmlns="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:beans="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
              http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
              http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
              http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
              http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

 <context:component-scan base-package="com.pack"/>
 
 <beans:bean
 class="org.springframework.web.servlet.view.InternalResourceViewResolver">
 <beans:property name="prefix" value="WEB-INF/jsp/"/>
 <beans:property name="suffix" value=".jsp"/> 
 </beans:bean>
 
   <mvc:annotation-driven/> 
  
  
  <!-- get properties from propertity file -->
<beans:bean id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <beans:property name="location"
            value="/WEB-INF/jdbc.properties"></beans:property>
       </beans:bean>

<!-- establish connection with database -->

<beans:bean id="dataSource"
        class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <beans:property name="driverClassName"
            value="${jdbc.driverClassName}" />
        <beans:property name="url" value="${jdbc.databaseurl}" />
        <beans:property name="username"
            value="${jdbc.username}" />
        <beans:property name="password"
            value="${jdbc.password}" />
    </beans:bean>


<!-- Hibernate to communicate with database its act like cfg.xml  -->

<beans:bean id="sessionFactory"
        class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <beans:property name="dataSource" ref="dataSource" />
        <beans:property name="annotatedClasses">
            <beans:list>
                <beans:value>com.pack.model.Employee</beans:value>
            </beans:list>
        </beans:property>
        <beans:property name="hibernateProperties">
            <beans:props>
                <beans:prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect
                </beans:prop>
                <beans:prop key="hibernate.show_sql">true</beans:prop>
                <beans:prop key="hibernate.hbm2ddl.auto">update</beans:prop>
            </beans:props>
        </beans:property>
    </beans:bean>


<!-- instead of main class -->

<tx:annotation-driven
        transaction-manager="transactionManager" />

    <beans:bean id="transactionManager"
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <beans:property name="sessionFactory"
            ref="sessionFactory" />
    </beans:bean>



</beans:beans>



employee controller


package com.pack.controller;

import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.pack.model.Employee;
import com.pack.service.EmployeeService;

@Controller
public class EmployeeController {

	@Autowired
	private EmployeeService employeeservice;
	
	@RequestMapping(value="/")
	public String employeeRegistrtionPage(ModelMap map) {
		Employee employee=new Employee();
		map.addAttribute("employeeForm",employee);
		return "EmployeeRegister";
		
	}
	
	@RequestMapping(value="/insertEmp",method=RequestMethod.POST)
	public String saveEmployee(@Validated @ModelAttribute("employeeForm")Employee empl,BindingResult result) {
		String response="";
		if(result.hasErrors()) {
		response="EmployeeRegister";
		
	}
		else {
			Random r= new Random();
			int empid=r.nextInt(99999)+100000;
			empl.setEmployeeid(empid);
			employeeservice.insertEmployee(empl);
			
			
			response="EmployeeSuccess";
		}
		
		return response;
		
	}
	
	
	
}


employee register.jsp


<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
    <%@ taglib uri="http://www.springframework.org/tags/form" prefix="form" %>
    <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html >
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Employee Registration Pge</title>
</head>
<body>
<h3>Employee Registration form</h3>
<c:url var="empAction" value="/insertEmp"/>
<form:form action="${empAction}" method="post" modelAttribute="employeeForm">
<table>
  <tr>
     <td>Employee Name:</td>
     <td><form:input type="text" path="name"/><font color="red"><form:errors path="name"/></font></td>
  </tr>
  <tr>
     <td>Employee Age:</td>
     <td><form:input type="text" path="age"/><font color="red"><form:errors path="age"/></font></td>
  </tr>
  <tr>
     <td>Address:</td>
     <td><form:input type="text" path="address"/><font color="red"><form:errors path="address"/></font></td>
  </tr>
  <tr>
     <td>Gender</td>
     <td><form:radiobutton path="gender" value="male"/>Male
         <form:radiobutton path="gender" value="female"/>Female
         <font color="red"><form:errors path="gender"/></font>
     </td>
  </tr>
   <tr>
     <td>Date of Join:</td>
     <td><form:input type="date" path="doj"/><font color="red"><form:errors path="doj"/></font></td>
  </tr>
   <tr>
     <td>Email:</td>
     <td><form:input type="email" path="email"/><font color="red"><form:errors path="email"/></font></td>
  </tr>
   <tr>
     <td><input type="submit" value="Add Employee"/></td>
     <td><input type="reset" value="Cancel"/></td>
  </tr>
</table>
</form:form>

</body>
</html>




employee.java

package com.pack.model;

import java.util.Date;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.NotEmpty;
import org.springframework.format.annotation.DateTimeFormat;

@Entity
@Table(name="emp3000")
public class Employee {

	@Id
	private Integer employeeid;
	
	@NotEmpty(message="name cannot be empty")
	@Size(min=6,max=25,message="name between 6 to 25 char")
	private String name;
	
	@NotNull(message="age cannot be null")
	@Min(value=20,message="age cannot be less than 20")
	@Max(value=50,message="age cannot be more than 50")
	private Integer age;
	
	@NotEmpty(message="address cannot be empty")
	private String address;
	
	@NotEmpty(message="gender cannot be empty")
	private String gender;
	
	@NotNull(message="DOJ cannot be empty")
	@DateTimeFormat(pattern="yyyy-MM-dd")
	private Date doj;
	
	@NotEmpty(message="email cannot be empty")
    @Email(message="please enter proper format")
	private String email;
	
	public Integer getEmployeeid() {
		return employeeid;
	}
	public void setEmployeeid(Integer employeeid) {
		this.employeeid = employeeid;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Integer getAge() {
		return age;
	}
	public void setAge(Integer age) {
		this.age = age;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.doj = doj;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Employee(Integer employeeid, String name, Integer age, String address, String gender, Date doj,
			String email) {
		super();
		this.employeeid = employeeid;
		this.name = name;
		this.age = age;
		this.address = address;
		this.gender = gender;
		this.doj = doj;
		this.email = email;
	}
	public Employee() {
		super();
		// TODO Auto-generated constructor stub
	}
	
	
}






emploueesucess.jsp

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<h1>Employee Inserted SuccessFully</h1>
</body>
</html>


jdbc pro

jdbc.driverClassName=com.mysql.jdbc.Driver
jdbc.dialect=org.hibernate.dialect.MySQlDialect
jdbc.databaseurl=jdbc:mysql://localhost:3306/Hibernate?useSSL=false
jdbc.username=root
jdbc.password=root



employeeserive

package com.pack.service;

import com.pack.model.Employee;

public interface EmployeeService {

	public void insertEmployee(Employee empl);
}



employeeseviceImpl



package com.pack.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.pack.dao.EmployeeDao;
import com.pack.model.Employee;

@Service
@Transactional
public class EmployeeServiceImpl implements EmployeeService {

	@Autowired
	private EmployeeDao employeeDao;
	
	@Override
	public void insertEmployee(Employee empl) {
		
		employeeDao.insertEmployee(empl);
	
	}
}




employeeservieImpl


package com.pack.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.pack.dao.EmployeeDao;
import com.pack.model.Employee;

@Service
@Transactional
public class EmployeeServiceImpl implements EmployeeService {

	@Autowired
	private EmployeeDao employeeDao;
	
	@Override
	public void insertEmployee(Employee empl) {
		
		employeeDao.insertEmployee(empl);
	
	}
}


employeeDao

package com.pack.dao;

import com.pack.model.Employee;

public interface EmployeeDao {

	public void insertEmployee(Employee emp);
}





employeeDaoimpl

package com.pack.dao;

import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.pack.model.Employee;

@Repository
public class EmployeeDaoImpl implements EmployeeDao {
	
	@Autowired
	private SessionFactory sessionfactory;

	@Override
	public void insertEmployee(Employee emp) {

		sessionfactory.getCurrentSession().save(emp);
		
		
	}

}


































 
 
























